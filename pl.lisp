((lambda (src-list)
	(define ca1r (lambda (l) (car (cdr l))))
	(define ca2r (lambda (l) (car (cdr (cdr l)))))
	(define ca3r (lambda (l) (car (cdr (cdr (cdr l))))))
	(define ca4r (lambda (l) (car (cdr (cdr (cdr (cdr l)))))))
	(define get-from-env
		(lambda (var env)
			(if (eq env '())
				'()
				(if (eq var (car (car env)))
					(car env)
					(get-from-env var (cdr env))))))
	(define get-from-frame
		(lambda (var frame)
			(if (eq frame '())
				'()
				((lambda (obj)
					(if (eq obj '())
						(get-from-frame var (cdr frame))
						obj))
				(get-from-env var (car frame))))))
	(define eval-atom
		(lambda (root frame)
			(if (eq root '-cons)
				root
			(if (eq root '-car)
				root
			(if (eq root '-cdr)
				root
			(if (eq root '-eq)
				root
			(if (eq root '-atom)
				root
				((lambda (obj)
					(if (eq obj '())
						'error-in-eval-atom
						(cdr obj)))
				(get-from-frame root frame)))))))))
	(define eval-quote
		(lambda (root frame)
			(ca1r root)))
	(define eval-if
		(lambda (root frame)
			(define pred (car (eval (ca1r root) frame)))
			(car (if pred
				(eval (ca2r root) frame)
				(eval (ca3r root) frame)))))
	(define eval-lambda
		(lambda (root frame)
			(cons root frame)))
	(define eval-define
		(lambda (root frame)
			(define cdr-frame (cdr frame))
			(define old-env (car frame))
			(define new-entry (cons (ca1r root) (car (eval (ca2r root) frame))))
			(define new-env (cons new-entry old-env))
			(cons new-env cdr-frame)))
	(define eval-list
		(lambda (root frame)
			(define car-root (car root))
			(define new-frame
				(if (eq car-root '-define)
					(eval-define root frame)
					frame))
			(define new-value
				(if (eq car-root '-quote)
					(eval-quote root frame)
				(if (eq car-root '-if)
					(eval-if root frame)
				(if (eq car-root '-lambda)
					(eval-lambda root frame)
				(if (eq car-root '-define)
					'()
					((lambda (evaled-car)
						(define eval-cons
							(lambda (root frame)
								(define a1 (car (eval (ca1r root) frame)))
								(define a2 (car (eval (ca2r root) frame)))
								(cons a1 a2)))
						(define eval-car
							(lambda (root frame)
								(define a1 (car (eval (ca1r root) frame)))
								(car a1)))
						(define eval-cdr
							(lambda (root frame)
								(define a1 (car (eval (ca1r root) frame)))
								(cdr a1)))
						(define eval-atom
							(lambda (root frame)
								(define a1 (car (eval (ca1r root) frame)))
								(atom a1)))
						(define eval-eq
							(lambda (root frame)
								(define a1 (car (eval (ca1r root) frame)))
								(define a2 (car (eval (ca2r root) frame)))
								(eq a1 a2)))
						(if (eq evaled-car '-cons)
							(eval-cons root frame)
						(if (eq evaled-car '-car)
							(eval-car root frame)
						(if (eq evaled-car '-cdr)
							(eval-cdr root frame)
						(if (eq evaled-car '-atom)
							(eval-atom root frame)
						(if (eq evaled-car '-eq)
							(eval-eq root frame)
							(apply evaled-car (cdr root) frame)))))))
					(car (eval (car root) frame))))))))
			(cons new-value new-frame)))
	(define eval-args
		(lambda (args frame)
			(if (eq args '())
				'()
				(cons (car (eval (car args) frame)) (eval-args (cdr args) frame)))))
	(define make-new-env
		(lambda (decls args frame)
			(if (eq decls '())
				'()
				(cons (cons (car decls) (car args)) (make-new-env (cdr decls) (cdr args) frame)))))
	(define make-new-frame
		(lambda (func args frame)
			(define lamb (car func))
			(define lamb-frame (cdr func))
			(define evaled-args (eval-args args frame))
			(define env (make-new-env (ca1r lamb) evaled-args frame))
			(cons env lamb-frame)))
	(define apply
		(lambda (func args frame)
		(define new-frame (cons '() (make-new-frame func args frame)))
		(define body (cdr (cdr (car func))))
		(define apply-aux
			(lambda (body frame)
				(define evaled-body (eval (car body) frame))
				(if (eq (cdr body) '())
					(car evaled-body)
					(apply-aux (cdr body) (cdr evaled-body)))))
		(apply-aux body new-frame)))
	(define eval
		(lambda (root frame)
			(if (eq root '())
				(cons '() frame)
			(if (atom root)
				(cons (eval-atom root frame) frame)
				(eval-list root frame)))))
	(car (eval src-list '())))
'((-lambda (x y z)
	(-define a (-cons x y))
	(-define b (-cons y z))
	(-define c (-cons z x))
	(-cons a (-cons b c)))
(-quote xxx)
(-quote yyy)
(-quote zzz)) )
